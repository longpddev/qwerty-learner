[{"name":"Capacity","trans":["Capacity: Get or set the total number of elements this internal data structure can hold without resizing"]},{"name":"Count","trans":["Count: Get the number of elements <T>contained in a List"]},{"name":"item[]","trans":["item []: Get or set the element at the specified index"]},{"name":"Add()","trans":["<T>Add (T): add an object to the end of the List"]},{"name":"AddRange()","trans":["<T>addRange (IEnumerable<T>): adds the elements of the specified collection to the end of the List"]},{"name":"AsReadOnly()","trans":["<T>asReadOnly (): returns a read-only ReadOnlyCollection wrapper for the current collection"]},{"name":"BinarySearch()","trans":["<T>binarySearch (T): searches the entire sorted List for an element using the default comparator and returns the zero-based index of that element","<T>binarySearch (T, iComparer): delete a single element from an arraylist","<T><T>binarySearch (Int32, Int32, T, iComparer): searches for elements in a range of elements in a sorted List using the specified comparator and returns the zero-based index of that element"]},{"name":"Clear()","trans":["Clear (): removes all elements from <T>the List"]},{"name":"Contains()","trans":["<T>Contains (T): determines if an element is in a List"]},{"name":"ConvertAll()","trans":["<T>convertAll <TOutput>(Converter<T, TOutput>): Converts the elements in the current List to another type and returns a list containing the converted elements"]},{"name":"CopyTo()","trans":["<T>copyTo (T []): copy the entire List to a compatible one-dimensional array, starting at the beginning of the target array","<T>copyTo (T [], Int32): copy the entire List to a compatible one-dimensional array, starting at the specified index in the target array","<T>copyTo (Int32, T [], Int32, Int32): copy a range of elements from List to a compatible one-dimensional array, starting at the specified index in the target array"]},{"name":"Equals()","trans":["Equals (Object): Determines whether the specified object is equal to the current object (inherited from Object)"]},{"name":"Exists()","trans":["<T>Exists (Predicate<T>): Determines whether the List contains elements that match the conditions defined by the specified predicate"]},{"name":"Find()","trans":["<T>Find (Predicate<T>): Search for elements that match the conditions defined by the specified predicate, and return the first matching element in the entire List"]},{"name":"FindAll()","trans":["<T>findAll (Predicate): Retrieves all elements that match the criteria defined by the specified predicate"]},{"name":"FindIndex()","trans":["<T>findIndex (Predicate<T>): Searches for elements that match the criteria defined by the specified predicate, and returns the zero-based index of the first matching element in the entire List","<T>findIndex (Int32, Predicate<T>): searches for elements that match the conditions defined by the specified predicate, and returns the zero-based index of the first matching item in the range of elements from the specified index to the last element in the List","<T>findIndex (Int32, Int32, Predicate<T>): searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first matching item in the range of elements in the List starting at the specified index and containing the specified number of elements"]},{"name":"FindLast()","trans":["<T>findLast (Predicate<T>): searches for elements that match the criteria defined by the specified predicate and returns the last matching element in the entire List"]},{"name":"FindLastIndex()","trans":["<T>findLastIndex (Predicate<T>): Searches for elements that match the conditions defined by the specified predicate, and returns a zero-based index of the last matching element in the entire List","<T><T>findLastIndex (Int32, Predicate): Searches for elements that match the criteria defined by the specified predicate, and returns a zero-based index of the list for the last match in the range from the first element to the element at the specified index","<T>findLastIndex (Int32, Int32, Predicate<T>): Search for elements that match the conditions defined by the specified predicate, and return the zero-based index of the List containing the specified number of elements and the last matching item in the range of elements to the end of the specified index"]},{"name":"ForEach()","trans":["<T>forEach (Action<T>): Performs a specified operation on each element of the List"]},{"name":"GetEnumerator()","trans":["<T>getEnumerator (): returns an enumerator that iterates through List"]},{"name":"GetHashCode()","trans":["getHashCode (): as the default hash function (inherited from Object)"]},{"name":"GetRange()","trans":["<T>getRange (Int32, Int32): creates a shallow copy of a range of elements in the source List"]},{"name":"GetType()","trans":["getType (): Get the Type of the current instance (inherited from Object)"]},{"name":"IndexOf()","trans":["<T>indexOf (T): searches for the specified object and returns the zero-based index of the first match in the entire List","<T>indexOf (T, Int32): searches for the specified object and returns the zero-based index of the first matching element in the list from the specified index to the last element","<T>indexOf (T, Int32, Int32): searches for the specified object and returns the zero-based index of the first matching item in this part of the List starting at the specified index and containing the specified number of elements"]},{"name":"Insert()","trans":["<T>Insert (Int32, T): insert an element at the specified index in the List"]},{"name":"InsertRange()","trans":["<T><T>insertRange (Int32, IEnumerable): insert an element in the collection at the specified index in the List"]},{"name":"LastIndexOf()","trans":["<T>lastIndexOf (T): searches for the specified object and returns the zero-based index of the last match in the entire List","<T>lastIndexOf (T, Int32): searches for the specified object and returns the zero-based index of the list from the first element to the last matching item in the specified index","<T>lastIndexOf (T, Int32, Int32): searches for the specified object and returns the zero-based index of the last matching item in the part of the List containing the specified number of elements up to the specified index"]},{"name":"MemberwiseClone()","trans":["memberwiseClone (): creates a shallow copy of the current Object (inherited from Object)"]},{"name":"Remove()","trans":["Remove (T): Removes the first match of a specific object <T>from the List"]},{"name":"RemoveAll()","trans":["<T>removeAll (Predicate): Removes all elements that match the conditions defined by the specified predicate","<T>removeAt (Int32): removes the element at the specified index of the List","<T>removeRange (Int32, Int32): removes a range of elements from a List"]},{"name":"Reverse()","trans":["Reverse (Int32, Int32): reverses the order of the elements in the specified range"]},{"name":"Sort()","trans":["<T>Sort (): sorts the elements in the entire List using the default comparator","<T>Sort (Comparison<T>): sort the elements in the entire list using <T>the specified comparison","<T>Sort (iComparer<T>): sorts the elements in the entire List using the specified comparator"]},{"name":"ToArray()","trans":["Copy the elements <T>of a List into a new array"]},{"name":"ToString()","trans":["Returns a string representing the current object (inherited from Object)"]},{"name":"TrimExcess()","trans":["trimExcess (): Set the capacity to the actual number of elements <T>in the List (if that number is less than a certain threshold)"]},{"name":"TrueForAll()","trans":["<T><T>trueForAll (Predicate): Determines whether every element in the List matches the criteria defined by the specified predicate"]}]